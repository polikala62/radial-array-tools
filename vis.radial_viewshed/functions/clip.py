'''
Created on Mar 12, 2024

@author: Karl
'''

import arcpy

def round_to_multiple(in_val, multiplier, direction):
    
    if direction == "UP":
        return in_val - (in_val % multiplier) + multiplier
    elif direction == "DOWN":
        return in_val - (in_val % multiplier)

def clip_extent(check_coordinates_list, buffer_distance):
    
    # Use list comprehension to retrieve max/min values for extraction, and round to nearest 10 km.
    clip_right = int(round_to_multiple(max([i[0] for i in check_coordinates_list]), buffer_distance, "UP"))
    clip_left = int(round_to_multiple(min([i[0] for i in check_coordinates_list]), buffer_distance, "DOWN"))
    
    clip_top = int(round_to_multiple(max([i[1] for i in check_coordinates_list]), buffer_distance, "UP"))
    clip_bottom = int(round_to_multiple(min([i[1] for i in check_coordinates_list]), buffer_distance, "DOWN"))
    
    return [clip_left, clip_bottom, clip_right, clip_top]

# Checks coordinates against all other raster generated by the script.
def clip_raster(clip_extent_list, in_raster, clip_ras_path=r"memory\clipras.tif"):
    
    # Set rectangle.
    clip_rectangle = " ".join([str(i) for i in clip_extent_list])
    #clip_rectangle = "{} {} {} {}".format(clip_left, clip_bottom, clip_right, clip_top)
    
    # Clip raster to coordinates.
    arcpy.Clip_management(in_raster, clip_rectangle, clip_ras_path)
    
    # Add key to dictionary.
    return clip_ras_path


def clip_polygon(clip_extent_list, in_poly, in_crs, clip_poly_path=r"memory\clip_polygon"):
    
    # Index order is LEFT, BOTTOM, RIGHT, TOP
    clip_pt_list = [[clip_extent_list[0], clip_extent_list[3]], 
                    [clip_extent_list[0], clip_extent_list[1]], 
                    [clip_extent_list[2], clip_extent_list[1]], 
                    [clip_extent_list[2], clip_extent_list[3]]
                    ]
    
    # Create an array with a point object for each coordinate pair
    array = arcpy.Array([arcpy.Point(x, y) for x, y in clip_pt_list])
    
    # Create a polygon geometry object using the array object
    boundary = arcpy.Polygon(array, in_crs)
    
    # Use the geometry to clip an input feature class
    arcpy.Clip_analysis(in_poly, boundary, clip_poly_path)
    
    # Add key to dictionary.
    return clip_poly_path